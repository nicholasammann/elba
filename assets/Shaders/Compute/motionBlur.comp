#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_input;
layout(rgba32f, binding = 1) uniform image2D img_output;
layout(rgba32f, binding = 2) uniform image2D previous_render;

uniform mat4 transform;

const float offset = 1.0f;
const float prevOffset = 0.25f;

void main()
{
  // get index in global work group, i.e. x,y position
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

  // calculations
  ivec2 offsets[9] = ivec2[](
        ivec2(-offset,  offset), // top-left
        ivec2( 0.0f,    offset), // top-center
        ivec2( offset,  offset), // top-right
        ivec2(-offset,  0.0f),   // center-left
        ivec2( 0.0f,    0.0f),   // center-center
        ivec2( offset,  0.0f),   // center-right
        ivec2(-offset, -offset), // bottom-left
        ivec2( 0.0f,   -offset), // bottom-center
        ivec2( offset, -offset)  // bottom-right    
    );

    vec3 col = vec3(0.0);
    for(int i = 0; i < 6; i++)
    {
      col += vec3(imageLoad(previous_render, pixel_coords + offsets[i])) * 0.4 +  vec3(imageLoad(img_input, pixel_coords + offsets[i])) * 0.4;
      col += vec3(imageLoad(previous_render, pixel_coords + offsets[i + 1])) * 0.3 +  vec3(imageLoad(img_input, pixel_coords + offsets[i + 1])) * 0.3;
      col += vec3(imageLoad(previous_render, pixel_coords + offsets[i + 2])) * 0.2 +  vec3(imageLoad(img_input, pixel_coords + offsets[i + 2])) * 0.2;
      col += vec3(imageLoad(previous_render, pixel_coords + offsets[i + 3])) * 0.1 +  vec3(imageLoad(img_input, pixel_coords + offsets[i + 3])) * 0.1;
      //prevTex[i] = vec3(imageLoad(img_input, pixel_coords + prevOffsets[i]));
    }

  // output to a specific pixel in the image
  imageStore(img_output, pixel_coords, vec4(0.2 * (col), 1.0));
}
