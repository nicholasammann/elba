#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_input;
layout(rgba32f, binding = 1) uniform image2D img_output;

const float offset = 1.0f;

void main()
{
  // get index in global work group, i.e. x,y position
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

  // calculations
  ivec2 offsets[9] = ivec2[](
        ivec2(-offset,  offset), // top-left
        ivec2( 0.0f,    offset), // top-center
        ivec2( offset,  offset), // top-right
        ivec2(-offset,  0.0f),   // center-left
        ivec2( 0.0f,    0.0f),   // center-center
        ivec2( offset,  0.0f),   // center-right
        ivec2(-offset, -offset), // bottom-left
        ivec2( 0.0f,   -offset), // bottom-center
        ivec2( offset, -offset)  // bottom-right    
    );

    float edgeKernel[9] = float[](
         1, 1, 1,
         1,  -8, 1,
         1,  1,  1
    );

    float gaussianKernel[9] = float[](
    1.0 / 16, 2.0 / 16, 1.0 / 16,
    2.0 / 16, 4.0 / 16, 2.0 / 16,
    1.0 / 16, 2.0 / 16, 1.0 / 16  
    );

    vec3 sampleTex[9];
    vec3 blurTex[9];
    vec3 edgeTex[9];
    for(int i = 0; i < 9; i++)
    {
      sampleTex[i] = vec3(imageLoad(img_input, pixel_coords + offsets[i]));
      blurTex[i] = sampleTex[i];
      edgeTex[i] = sampleTex[i];
    }

    vec3 edgeCol = vec3(0.0);
    vec3 blurCol = vec3(0.0);
    vec3 finalCol = vec3(0.0);

      for(int i = 0; i < 9; i++)
      {
        edgeTex[i] +=  sampleTex[i] * edgeKernel[i];
      }

      for(int j = 0; j < 5; ++j)
      {
        for(int i = 0; i < 9; ++i)
        {
          blurTex[i] +=  blurTex[i] * gaussianKernel[i];
        }
      }

      for(int i = 0; i < 9; ++i)
      {
        finalCol += edgeTex[i] * sampleTex[i] * blurTex[i];
      }



  // output to a specific pixel in the image
  imageStore(img_output, pixel_coords, vec4(finalCol, 1.0));
}
