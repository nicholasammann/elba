#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_input;
layout(rgba32f, binding = 1) uniform image2D img_output;

const float offset = 1.0f;

const vec3 constOffsets = vec3(.2, .2, .2);

const float PI  = 3.14159265358979323846264f;

const float mean = 0.5f;

const float stddev = 0.1f;

float rand(vec2 co)
{
  // http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
  float r = fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);

  // Make sure that we don't return 0.0
  if(r == 0.0)
    return 0.000000000001;
  else
    return r;
}

vec3 gaussrand(vec2 co)
{
  float U, V, R, Z;


  U = rand(co + vec2(constOffsets.x, constOffsets.x));
  V = rand(co + vec2(constOffsets.y, constOffsets.y));
  R = rand(co + vec2(constOffsets.z, constOffsets.z));
  
  // Switch between the two random outputs.
  if(R < 0.5)
    Z = sqrt(-2.0 * log(U)) * sin(2.0 * PI * V);
  else
    Z = sqrt(-2.0 * log(U)) * cos(2.0 * PI * V);

  // Apply the stddev and mean.
  Z = Z * stddev + mean;

  return vec3(Z, Z, Z);
}

void main()
{
  // get index in global work group, i.e. x,y position
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

  // calculations
  ivec2 offsets[9] = ivec2[](
        ivec2(-offset,  offset), // top-left
        ivec2( 0.0f,    offset), // top-center
        ivec2( offset,  offset), // top-right
        ivec2(-offset,  0.0f),   // center-left
        ivec2( 0.0f,    0.0f),   // center-center
        ivec2( offset,  0.0f),   // center-right
        ivec2(-offset, -offset), // bottom-left
        ivec2( 0.0f,   -offset), // bottom-center
        ivec2( offset, -offset)  // bottom-right    
    );

    vec3 sampleTex[9];
    for(int i = 0; i < 9; i++)
    {
      sampleTex[i] = vec3(imageLoad(img_input, pixel_coords + offsets[i]));
    }

    vec3 col = vec3(0.0);

    for(int i = 0; i < 9; i++)
    {
      col += sampleTex[i] * gaussrand(vec2(sampleTex[i].x, sampleTex[i].y));
    }

  // output to a specific pixel in the image
  imageStore(img_output, pixel_coords, vec4(col, 1.0));
}
