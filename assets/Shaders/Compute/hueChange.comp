#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_input;
layout(rgba32f, binding = 1) uniform image2D img_output;

const float offset = 1.0f;

uniform float hue;

vec3 rgbToHsv(vec3 rgb)
{
  vec3 hsv;

  float minVal = min(rgb[0], min(rgb[1], rgb[2]));
  float maxVal = max(rgb[0], max(rgb[1], rgb[2]));

  hsv[2] = maxVal;

  float delta = maxVal - minVal;

  if (maxVal > 0.0)
  {
    hsv[1] = delta / maxVal;
  }
  else
  {
    hsv[0] = -1.0;
    hsv[1] = 0.0;
    return hsv;
  }

  if (rgb[0] == maxVal)
  {
    hsv[0] = (rgb[1] - rgb[2]) / delta;
  }
  else if (rgb[1] == maxVal)
  {
    hsv[0] = 2 + (rgb[2] - rgb[0]) / delta;
  }
  else
  {
    hsv[0] = 4 + (rgb[0] - rgb[1]) / delta;
  }

  hsv[0] = hsv[0] * 60.0;

  if (hsv[0] < 0.0)
  {
    hsv[0] += 360.0;
  }

  return hsv;
}

vec3 hsvToRgb(vec3 hsv)
{
  int i;
  float f, p, q, t;
  vec3 rgb;

  if (hsv[1] == 0)
  {
    rgb[0] = hsv[2];
    rgb[1] = hsv[2];
    rgb[2] = hsv[2];
    return rgb;
  }

  hsv[0] = hsv[0] / 60.0;
  i = int(floor(hsv[0]));
  f = hsv[0] - i;
  p = hsv[2] * (1 - hsv[1]);
  q = hsv[2] * (1 - hsv[1] * f);
  t = hsv[2] * (1 - hsv[1] * (1 - f));

  switch (i)
  {
    case 0:
    {
      rgb = vec3(hsv[2], t, p);
      break;
    }

    case 1:
    {
      rgb = vec3(q, hsv[2], p);
      break;
    }

    case 2:
    {
      rgb = vec3(p, hsv[2], t);
      break;
    }

    case 3:
    {
      rgb = vec3(p, q, hsv[2]);
      break;
    }

    case 4:
    {
      rgb = vec3(t, p, hsv[2]);
      break;
    }

    default:
    {
      rgb = vec3(hsv[2], p, q);
      break;
    }
  }

  return rgb;
}

void main()
{
  // get index in global work group, i.e. x,y position
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
  vec3 pixel = vec3(imageLoad(img_input, pixel_coords));

  vec3 hsvTemp = rgbToHsv(pixel);
  hsvTemp[0] = hue;
  vec3 rgb = hsvToRgb(hsvTemp);

  // output to a specific pixel in the image
  imageStore(img_output, pixel_coords, vec4(rgb, 1.0));
}
