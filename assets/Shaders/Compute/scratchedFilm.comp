#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_input;
layout(rgba32f, binding = 1) uniform image2D img_output;

const float offset = 1.0f;

uniform int lineWidth;
uniform int patternWidth;
uniform int minPatternWidth;
uniform float timeSince;

void main()
{
  // get index in global work group, i.e. x,y position
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

  vec3 pixel = vec3(imageLoad(img_input, pixel_coords));

  float xCoord = pixel_coords.x;

  float tempPatternWidth = max(300.0 * float(patternWidth) / xCoord + 100.0 + 200.0 * sin(timeSince) * sin(0.5 * timeSince) * sin(2.0 * timeSince), minPatternWidth);

  while (xCoord > tempPatternWidth)
  {
    xCoord -= tempPatternWidth;
  }

  float exponent = min(tempPatternWidth - xCoord, 6.0);

  float closestBand = pow(2, exponent);

  while (closestBand < xCoord)
  {
    closestBand = 2 * closestBand;
  }

  float range = min(closestBand - int(xCoord), lineWidth);

  // bell curve
  //float colorScalar = 20.0 * (lineWidth - range) * 0.0035940745982111052 * pow(2.71828, (-(pixel_coords.x - 1060)^2) / 7200);
  float colorScalar = (lineWidth - range) / lineWidth * pow(2.71828, (-pow((xCoord - 410), 2)) / 40000);

  //float color = max(((0.7 * pixel_coords.x / xCoord) * (lineWidth - range) / lineWidth) - 0.001 * pixel_coords.x, 0);
  vec3 lineColor = vec3(colorScalar);

  vec3 col = pixel + lineColor;

  // output to a specific pixel in the image
  imageStore(img_output, pixel_coords, vec4(col, 1.0));
}
